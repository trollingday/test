<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- Namespaces탭 : security 체크후 선택 > 오른쪽 4.2 버전 선택 -->
<!-- 정적리스소 파일(servlet-context.xml에 먼저 추가)에는 보안설정을 하지 않음 -->
   <security:http pattern="/resources/**" security="none" />
   <security:http pattern="/common/**" security="none" />
   <security:http auto-config="true" use-expressions="true" create-session="never">

      <!-- 관리자 권한 영역 -->
      <security:intercept-url   pattern="/memberList.do" access="hasRole('ROLE_ADMIN')" />
 	  <security:intercept-url   pattern="/adminMain.st" access="hasRole('ROLE_ADMIN')" />      
 	  <security:intercept-url   pattern="/productList.st" access="hasRole('ROLE_ADMIN')" />  
 	  <security:intercept-url   pattern="/productAdd.st" access="hasRole('ROLE_ADMIN')" />  
 	  <security:intercept-url   pattern="/productUpdate.st" access="hasRole('ROLE_ADMIN')" />   	   	            
      <security:intercept-url   pattern="/productDelete.st" access="hasRole('ROLE_ADMIN')" />   	   	          
 	  <security:intercept-url   pattern="/productAddAction.st" access="hasRole('ROLE_ADMIN')" />  
 	  <security:intercept-url   pattern="/productUpdateAction.st" access="hasRole('ROLE_ADMIN')" />   	   	            
      <security:intercept-url   pattern="/productDeleteAction.st" access="hasRole('ROLE_ADMIN')" />   	   	        
	  <security:intercept-url   pattern="/orderList.od " access="hasRole('ROLE_ADMIN')" /> 	   	        
      <security:intercept-url   pattern="/payPermit.od" access="hasRole('ROLE_ADMIN')" />
      <security:intercept-url   pattern="/refundList.od" access="hasRole('ROLE_ADMIN')" />
      <security:intercept-url   pattern="/refundReject.od" access="hasRole('ROLE_ADMIN')" />
      <security:intercept-url   pattern="/refundPermit.od" access="hasRole('ROLE_ADMIN')" />
      <security:intercept-url   pattern="/saleHistory.od" access="hasRole('ROLE_ADMIN')" />
      <security:intercept-url   pattern="/saleChart.od" access="hasRole('ROLE_ADMIN')" />
      <security:intercept-url   pattern="/boardKeyword.sc" access="hasRole('ROLE_ADMIN')" />
                                  	   	        
      <!-- 권한에 관계없이 접속 가능영역(guest도 접속 가능)  -->
      <security:intercept-url   pattern="/productAll.st" access="permitAll" />        
	  <security:intercept-url   pattern="/productDetail2.st" access="permitAll" />  

      <!-- 로그인한 사용자 영역(customer + 관리자) -->
      <security:intercept-url   pattern="/**.ad" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
      
      <security:intercept-url   pattern="/mypage.do" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
      <security:intercept-url   pattern="/modifyDetailAction.do" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />          
      <security:intercept-url   pattern="/modifyCustomerAction.do" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
      <security:intercept-url   pattern="/deleteCustomerAction.do" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
      <security:intercept-url   pattern="/customerOrderList.od" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
      
      <security:intercept-url   pattern="/purchasing.od" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
      <security:intercept-url   pattern="/purchasingAction.od" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />          
      <security:intercept-url   pattern="/purchasedCancel.od" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
      <security:intercept-url   pattern="/refundReq.od" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
      
      <security:intercept-url   pattern="/cartAdd.od" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
      <security:intercept-url   pattern="/cartList.od" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
      <security:intercept-url   pattern="/cartRemove.od" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
      <security:intercept-url   pattern="/cartPay.od" access="hasAnyRole('ROLE_USER', 'ROLE_ADMIN')" />
                              
            
            
      <!-- 로그인폼 -->
      <!-- login.do => login_check.do => UserAuthenticationService => 성공/실패/거부 -->
      <!-- 5개 설정을 소스와 일치시켜야 한다. -->
      <security:form-login login-page="/login.do"
               login-processing-url="/login_check.do" 
               authentication-success-handler-ref="userLoginSuccessHandler"
               authentication-failure-handler-ref="userLoginFailureHandler"
               username-parameter="id" password-parameter="password" /> 
       
               
      <security:session-management>
         <!-- 같은 브라우저에서 여러창 동시접속수 / 세션만료시 이동할 주소 / 최대 세션 초과시 에러 옵션-->
         <security:concurrency-control max-sessions="2" 
            expired-url="/login.do"
            error-if-maximum-exceeded="true"
         />
      </security:session-management>         
      
      <!-- 접근 권한이 없는 경우 작동 -->
      <security:access-denied-handler ref="userDeniedHandler" />
   </security:http>
   
   <!-- 로그인 성공시 작동 -->
   <bean id="userLoginSuccessHandler" class="spring.mvc.kyj.common.UserLoginSuccessHandler">
       <constructor-arg name="sqlSession" ref="sqlSession" /> 
   </bean>
   
   <!-- 로그인 실패시 작동 -->
   <bean id="userLoginFailureHandler" class="spring.mvc.kyj.common.UserLoginFailureHandler">
      <constructor-arg name="sqlSession" ref="sqlSession" />
      <constructor-arg name="passwordEncoder" ref="bcryptPasswordEncoder" />  
   </bean>
   
   <!-- 접근 권한이 없는 경우 작동 -->
   <bean id="userDeniedHandler" class="spring.mvc.kyj.common.UserDeniedHandler" />
   
   <!-- 로그인 인증처리 클래스 -->
   <!-- login-processing-url="/login_check.do"에 의해 자동호출  -->
   <bean id="userService" class="spring.mvc.kyj.common.UserAuthenticationService" >
   	<constructor-arg name="sqlSession" ref="sqlSession"/>
   </bean>
   
   <!-- 비밀번호 암호화 클래스 -->
   <bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
   
</beans>